import { render, screen } from "../utils";
import RootLayout, { metadata } from "../../app/layout";

// Mock the font imports since they're not available in test environment
jest.mock("next/font/google", () => ({
  Geist: () => ({
    variable: "--font-geist-sans",
  }),
  Geist_Mono: () => ({
    variable: "--font-geist-mono",
  }),
}));

describe("RootLayout", () => {
  describe("Component Rendering", () => {
    it("should render children correctly", () => {
      // Skip providers for layout component since it contains html/body tags
      render(
        <RootLayout>
          <div data-testid="test-child">Test Content</div>
        </RootLayout>,
        { skipProviders: true }
      );

      expect(screen.getByTestId("test-child")).toBeInTheDocument();
      expect(screen.getByText("Test Content")).toBeInTheDocument();
    });

    it("should render multiple children", () => {
      render(
        <RootLayout>
          <div data-testid="child-1">First Child</div>
          <div data-testid="child-2">Second Child</div>
        </RootLayout>,
        { skipProviders: true }
      );

      expect(screen.getByTestId("child-1")).toBeInTheDocument();
      expect(screen.getByTestId("child-2")).toBeInTheDocument();
    });

    it("should handle empty children", () => {
      render(<RootLayout>{null}</RootLayout>, { skipProviders: true });

      // Should not throw and should render the layout structure
      const body = document.body;
      expect(body).toBeInTheDocument();
    });
  });

  describe("HTML Structure and Styling", () => {
    it("should have correct HTML structure", () => {
      render(
        <RootLayout>
          <div>Test</div>
        </RootLayout>,
        { skipProviders: true }
      );

      // Check for html and body elements
      const body = document.body;
      expect(body).toHaveClass("antialiased");
    });

    it("should include font variables in body class", () => {
      render(
        <RootLayout>
          <div>Test</div>
        </RootLayout>,
        { skipProviders: true }
      );

      const body = document.body;
      expect(body.className).toContain("--font-geist-sans");
      expect(body.className).toContain("--font-geist-mono");
    });

    it("should have proper lang attribute on html element", () => {
      render(
        <RootLayout>
          <div>Test</div>
        </RootLayout>,
        { skipProviders: true }
      );

      const htmlElement = document.documentElement;
      expect(htmlElement).toHaveAttribute("lang", "en");
    });

    it("should apply all required CSS classes to body", () => {
      render(
        <RootLayout>
          <div>Test</div>
        </RootLayout>,
        { skipProviders: true }
      );

      const body = document.body;
      expect(body).toHaveClass("antialiased");
      // Font variables should be present in className
      expect(body.className).toMatch(/--font-geist-sans/);
      expect(body.className).toMatch(/--font-geist-mono/);
    });
  });

  describe("Font Configuration", () => {
    it("should properly configure Geist fonts", () => {
      // Test that our mocked fonts return the expected structure
      const { Geist, Geist_Mono } = require("next/font/google");

      const geistSans = Geist();
      const geistMono = Geist_Mono();

      expect(geistSans.variable).toBe("--font-geist-sans");
      expect(geistMono.variable).toBe("--font-geist-mono");
    });
  });

  describe("Snapshot Tests", () => {
    it("should match snapshot with basic content", () => {
      const { container } = render(
        <RootLayout>
          <div>Test Content</div>
        </RootLayout>,
        { skipProviders: true }
      );
      expect(container.firstChild).toMatchSnapshot();
    });

    it("should match snapshot with complex children", () => {
      const { container } = render(
        <RootLayout>
          <main>
            <h1>Test Page</h1>
            <p>Test description</p>
          </main>
        </RootLayout>,
        { skipProviders: true }
      );
      expect(container.firstChild).toMatchSnapshot();
    });
  });
});

describe("Metadata", () => {
  describe("Metadata Export", () => {
    it("should export correct metadata", () => {
      expect(metadata).toEqual({
        title: "Create Next App",
        description: "Generated by create next app",
      });
    });

    it("should have required metadata fields", () => {
      expect(metadata).toHaveProperty("title");
      expect(metadata).toHaveProperty("description");
      expect(typeof metadata.title).toBe("string");
      expect(typeof metadata.description).toBe("string");
    });

    it("should have non-empty metadata values", () => {
      expect(metadata.title).toBeTruthy();
      expect(metadata.description).toBeTruthy();
      expect(metadata.title.length).toBeGreaterThan(0);
      expect(metadata.description.length).toBeGreaterThan(0);
    });
  });
});
