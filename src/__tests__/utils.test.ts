// Test file to verify that our test utilities work correctly
import {
  createMockMetadata,
  createMockRouter,
  createMockProps,
  createTestId,
  createMockClasses,
} from "./utils/test-data-factories";

import {
  metadataFixtures,
  componentPropsFixtures,
  cssClassFixtures,
} from "./utils/test-fixtures";

import {
  setupUserEvent,
  mockConsole,
  createMockFunction,
} from "./utils/test-helpers";

import { mockApiResponses, setupFetchMock } from "./mocks/api";

describe("Test Utilities", () => {
  describe("Data Factories", () => {
    it("should create mock metadata with defaults", () => {
      const metadata = createMockMetadata();
      expect(metadata).toEqual({
        title: "Test App",
        description: "Test description for the app",
      });
    });

    it("should create mock metadata with overrides", () => {
      const metadata = createMockMetadata({ title: "Custom Title" });
      expect(metadata.title).toBe("Custom Title");
      expect(metadata.description).toBe("Test description for the app");
    });

    it("should create mock router with defaults", () => {
      const router = createMockRouter();
      expect(jest.isMockFunction(router.push)).toBe(true);
      expect(router.pathname).toBe("/");
    });

    it("should create test IDs correctly", () => {
      expect(createTestId("button")).toBe("button");
      expect(createTestId("button", "submit")).toBe("button-submit");
    });

    it("should create mock CSS classes", () => {
      expect(createMockClasses("class1", "class2")).toBe("class1 class2");
    });
  });

  describe("Test Fixtures", () => {
    it("should provide metadata fixtures", () => {
      expect(metadataFixtures.default).toEqual({
        title: "Create Next App",
        description: "Generated by create next app",
      });
    });

    it("should provide component props fixtures", () => {
      expect(componentPropsFixtures.homePageProps).toHaveProperty("className");
    });

    it("should provide CSS class fixtures", () => {
      expect(cssClassFixtures.container).toContain("flex");
    });
  });

  describe("Test Helpers", () => {
    it("should setup user event", () => {
      const user = setupUserEvent();
      expect(user).toBeDefined();
      expect(user.click).toBeInstanceOf(Function);
    });

    it("should create mock functions", () => {
      const mockFn = createMockFunction();
      expect(jest.isMockFunction(mockFn)).toBe(true);
    });
  });

  describe("API Mocks", () => {
    it("should create success response", () => {
      const response = mockApiResponses.success({ data: "test" });
      expect(response.ok).toBe(true);
      expect(response.status).toBe(200);
    });

    it("should create error response", () => {
      const response = mockApiResponses.error(500, "Server Error");
      expect(response.ok).toBe(false);
      expect(response.status).toBe(500);
    });

    it("should setup fetch mock", () => {
      const mockFetch = setupFetchMock();
      expect(global.fetch).toBe(mockFetch);
      expect(jest.isMockFunction(global.fetch)).toBe(true);
    });
  });
});
