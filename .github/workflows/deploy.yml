name: CI/CD Pipeline

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
      - develop

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  NODE_VERSION_MATRIX: "[18, 20, 22]"

jobs:
  # Setup and caching job
  setup:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18, 20, 22]
    outputs:
      cache-key: ${{ steps.cache-key.outputs.key }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: "pnpm"

      - name: Generate cache key
        id: cache-key
        run: echo "key=deps-${{ runner.os }}-node${{ matrix.node-version }}-${{ hashFiles('**/pnpm-lock.yaml') }}" >> $GITHUB_OUTPUT

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.pnpm-store
            node_modules
          key: ${{ steps.cache-key.outputs.key }}
          restore-keys: |
            deps-${{ runner.os }}-node${{ matrix.node-version }}-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

  # Code quality checks
  quality-checks:
    runs-on: ubuntu-latest
    needs: setup
    strategy:
      matrix:
        node-version: [18, 20, 22]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: "pnpm"

      - name: Restore dependencies cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.pnpm-store
            node_modules
          key: deps-${{ runner.os }}-node${{ matrix.node-version }}-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            deps-${{ runner.os }}-node${{ matrix.node-version }}-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Auto-fix Biome issues
        run: |
          echo "Attempting to auto-fix Biome issues..."
          pnpm run lint:fix || true

      - name: Check remaining Biome issues
        run: |
          echo "Checking for remaining issues after auto-fix..."
          if ! pnpm run lint --diagnostic-level=error; then
            echo "❌ Critical errors found that cannot be auto-fixed."
            echo "Please fix these issues locally and commit the changes."
            exit 1
          fi

          echo "✅ No critical errors found. Checking for warnings..."
          pnpm run lint --reporter=github || echo "⚠️ Warnings found but not blocking CI"

      - name: Run Biome formatting check
        run: pnpm run format:check

      - name: TypeScript type checking
        run: pnpm run type-check

      - name: Dependency vulnerability scan
        run: pnpm audit --audit-level moderate

  # Security scanning
  security-scan:
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9

      - name: Setup Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: "pnpm"

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run security audit
        run: pnpm audit --audit-level high

      - name: Check for known vulnerabilities
        run: |
          if pnpm audit --audit-level high --json | jq '.vulnerabilities | length' | grep -q '^0$'$'; then
            echo "No high-severity vulnerabilities found"
          else
            echo "High-severity vulnerabilities detected"
            exit 1
          fi
  # Unit and Integration Tests
  unit-tests:
    runs-on: ubuntu-latest
    needs: [setup, quality-checks]
    strategy:
      matrix:
        node-version: [18, 20, 22]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: "pnpm"

      - name: Restore dependencies cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.pnpm-store
            node_modules
          key: deps-${{ runner.os }}-node${{ matrix.node-version }}-${{ hashFiles('**/pnpm-lock.yaml') }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run unit tests with coverage
        run: pnpm test:coverage

      - name: Upload coverage reports
        uses: codecov/codecov-action@v4
        if: matrix.node-version == '20'
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella

      - name: Upload coverage artifacts
        uses: actions/upload-artifact@v4
        if: matrix.node-version == '20'
        with:
          name: coverage-report
          path: coverage/

  # E2E Tests
  e2e-tests:
    runs-on: ubuntu-latest
    needs: [setup, quality-checks]
    strategy:
      matrix:
        browser: [chromium, firefox, webkit]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9

      - name: Setup Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: "pnpm"

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Install Playwright browsers
        run: pnpm exec playwright install --with-deps ${{ matrix.browser }}

      - name: Build application
        run: pnpm build

      - name: Start application
        run: pnpm start &
        env:
          PORT: 3000

      - name: Wait for application to be ready
        run: |
          timeout 60 bash -c 'until curl -f http://localhost:3000/api/health 2>/dev/null || curl -f http://localhost:3000 2>/dev/null; do sleep 2; done'

      - name: Run E2E tests
        run: pnpm test:e2e --project=${{ matrix.browser }}
        env:
          BASE_URL: http://localhost:3000

      - name: Upload E2E test results
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: e2e-results-${{ matrix.browser }}
          path: |
            test-results/
            playwright-report/
  # Build and Push Docker Image
  build-and-push:
    runs-on: ubuntu-latest
    needs: [unit-tests, e2e-tests, security-scan]
    if: github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.action != 'closed')
    permissions:
      contents: read
      packages: write
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-tags: ${{ steps.meta.outputs.tags }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value=staging,enable=${{ github.ref == 'refs/heads/develop' }}
          labels: |
            org.opencontainers.image.title=${{ github.repository }}
            org.opencontainers.image.description=Enhanced CI/CD Next.js Application
            org.opencontainers.image.vendor=${{ github.repository_owner }}

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILDKIT_INLINE_CACHE=1
            NODE_ENV=production
          platforms: linux/amd64,linux/arm64

  # Deploy to Staging
  deploy-staging:
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    environment:
      name: staging
      url: ${{ steps.deploy.outputs.url }}
    steps:
      - name: Deploy to staging
        id: deploy
        run: |
          echo "Deploying to staging environment..."
          echo "Image: ${{ needs.build-and-push.outputs.image-tags }}"
          echo "Digest: ${{ needs.build-and-push.outputs.image-digest }}"
          # Add actual deployment logic here
          echo "url=https://staging.example.com" >> $GITHUB_OUTPUT

      - name: Health check
        run: |
          echo "Performing health check..."
          # Add health check logic here
          # curl -f ${{ steps.deploy.outputs.url }}/api/health

  # Deploy to Production
  deploy-production:
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment:
      name: production
      url: ${{ steps.deploy.outputs.url }}
    steps:
      - name: Deploy to production
        id: deploy
        run: |
          echo "Deploying to production environment..."
          echo "Image: ${{ needs.build-and-push.outputs.image-tags }}"
          echo "Digest: ${{ needs.build-and-push.outputs.image-digest }}"
          # Add actual deployment logic here
          echo "url=https://production.example.com" >> $GITHUB_OUTPUT

      - name: Health check
        run: |
          echo "Performing health check..."
          # Add health check logic here
          # curl -f ${{ steps.deploy.outputs.url }}/api/health

      - name: Rollback on failure
        if: failure()
        run: |
          echo "Deployment failed, initiating rollback..."
          # Add rollback logic here
